"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextRef = exports.useContextRef = exports.useRefs = exports.RefProvider = void 0;
///<reference path="../declarations/index.d.ts" />
var React = __importStar(require("react"));
var Context = React.createContext({
    refs: [],
    register: function () { },
    setMeta: function () { }
});
var RefProvider = function (_a) {
    var children = _a.children;
    var refsMap = React.useRef(new Map()).current;
    var _b = React.useState([]), refs = _b[0], setRefs = _b[1];
    var register = React.useCallback(function (key, refData) {
        if (refData == null) {
            if (refsMap.has(key)) {
                refsMap.delete(key);
                setRefs(Array.from(refsMap.values()));
            }
        }
        else {
            var oldRefData = refsMap.get(key) || {};
            if (oldRefData.current !== refData.current ||
                oldRefData.meta !== refData.meta ||
                oldRefData.type !== refData.type) {
                refsMap.set(key, refData);
                setRefs(Array.from(refsMap.values()));
            }
        }
    }, [setRefs]);
    var setMeta = React.useCallback(function (key, meta) {
        if (!refsMap.has(key)) {
            return;
        }
        var refData = refsMap.get(key);
        if (!refData) {
            return;
        }
        refData.meta = meta;
    }, [setRefs]);
    var context = React.useMemo(function () { return ({
        refs: refs,
        register: register,
        setMeta: setMeta
    }); }, [refs, register]);
    return React.createElement(Context.Provider, { value: context }, children);
};
exports.RefProvider = RefProvider;
function useRefs(type) {
    var refs = React.useContext(Context).refs;
    if (typeof type === "undefined") {
        return refs;
    }
    return refs.filter(function (ref) { return ref.type === type; });
}
exports.useRefs = useRefs;
var useIsomorphicLayoutEffect = typeof window !== "undefined" &&
    typeof window.document !== "undefined" &&
    typeof window.document.createElement !== "undefined"
    ? React.useLayoutEffect
    : React.useEffect;
function useContextRef(typeParam, metaParam) {
    var type = typeof metaParam === "undefined" ? "" : typeParam;
    var meta = typeof metaParam === "undefined" ? typeParam : metaParam;
    var key = React.useRef({}).current;
    var _a = React.useContext(Context), register = _a.register, setMeta = _a.setMeta;
    var callback = React.useCallback(function (current) {
        register(key, current ? { current: current, meta: meta, type: type } : null);
    }, [register]);
    useIsomorphicLayoutEffect(function () {
        setMeta(key, meta);
    }, [meta]);
    return callback;
}
exports.useContextRef = useContextRef;
function ContextRef(props) {
    var setRef = useContextRef(props.type || "", props.meta);
    return props.children(setRef);
}
exports.ContextRef = ContextRef;
