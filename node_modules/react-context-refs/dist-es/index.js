///<reference path="../declarations/index.d.ts" />
import * as React from "react";
var Context = React.createContext({
    refs: [],
    register: function () { },
    setMeta: function () { }
});
export var RefProvider = function (_a) {
    var children = _a.children;
    var refsMap = React.useRef(new Map()).current;
    var _b = React.useState([]), refs = _b[0], setRefs = _b[1];
    var register = React.useCallback(function (key, refData) {
        if (refData == null) {
            if (refsMap.has(key)) {
                refsMap.delete(key);
                setRefs(Array.from(refsMap.values()));
            }
        }
        else {
            var oldRefData = refsMap.get(key) || {};
            if (oldRefData.current !== refData.current ||
                oldRefData.meta !== refData.meta ||
                oldRefData.type !== refData.type) {
                refsMap.set(key, refData);
                setRefs(Array.from(refsMap.values()));
            }
        }
    }, [setRefs]);
    var setMeta = React.useCallback(function (key, meta) {
        if (!refsMap.has(key)) {
            return;
        }
        var refData = refsMap.get(key);
        if (!refData) {
            return;
        }
        refData.meta = meta;
    }, [setRefs]);
    var context = React.useMemo(function () { return ({
        refs: refs,
        register: register,
        setMeta: setMeta
    }); }, [refs, register]);
    return React.createElement(Context.Provider, { value: context }, children);
};
export function useRefs(type) {
    var refs = React.useContext(Context).refs;
    if (typeof type === "undefined") {
        return refs;
    }
    return refs.filter(function (ref) { return ref.type === type; });
}
var useIsomorphicLayoutEffect = typeof window !== "undefined" &&
    typeof window.document !== "undefined" &&
    typeof window.document.createElement !== "undefined"
    ? React.useLayoutEffect
    : React.useEffect;
export function useContextRef(typeParam, metaParam) {
    var type = typeof metaParam === "undefined" ? "" : typeParam;
    var meta = typeof metaParam === "undefined" ? typeParam : metaParam;
    var key = React.useRef({}).current;
    var _a = React.useContext(Context), register = _a.register, setMeta = _a.setMeta;
    var callback = React.useCallback(function (current) {
        register(key, current ? { current: current, meta: meta, type: type } : null);
    }, [register]);
    useIsomorphicLayoutEffect(function () {
        setMeta(key, meta);
    }, [meta]);
    return callback;
}
export function ContextRef(props) {
    var setRef = useContextRef(props.type || "", props.meta);
    return props.children(setRef);
}
